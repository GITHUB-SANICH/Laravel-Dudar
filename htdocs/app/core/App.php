<?php
class App{
	protected $controller	= 'Home';	//контроллер, вызываемый по-умолчанию (если парамеьтры не переданы по URL адресу).
	protected $method			= 'index';	//метод по-умолчанию (если парамеьтры не переданы по URL адресу)
	protected $params = [];					//поле, хранящее несколько элементов, полученных из URL запроса
	public function __construct(){
		//проверку URL на пустоту	
		$url = $this->parseUrl();			//вызов метода проверки на наличие GET запроса в URL. print_r используется так как выводится массив-так как строка разбита на массив через '/'.
		
		//Отслеживание контроллера в URL и замена им контроллера по-умолчанию
		if(file_exists('app/controllers/'.ucfirst($url[0]).'.php')){	//проверка на наличие контроллера с названием первого элемента в адресной строки после корневой папки. 
			$this->controller =  ucfirst($url[0]);								//если такой контроллер есть, то заменять контроллер по-умолчанию на контролер в адресной строке.
			unset($url[0]);														 	//удаление первого значения массива (контроллера) - это нужно, так как дальше пойдут методы. 
		}
		else if(!file_exists('app/controllers/'.ucfirst($url[0]).'.php') && ucfirst($url[0]) != ''){	//вызов контроллера, ведущего на шаблон с ошибкой 404.
				$this->controller = 'Error404';
				unset($url[0]); 	
			// - не нужно (удалить) - так как после не последует ни каких методов в контроллере. Он будет только один. По-умолчанию "index".
		}
		//где, 
		//	ucfirst	- метод ставящий первый символ строки с заглавной буквы

		//подключение файла контроллера
		require_once 'app/controllers/'.$this->controller.'.php';	//вызов нужного контролера
		//echo 'Вывод контролера: '.$this->controller; 					//вывод названия контролелра. Если ввести в URL несуществующий контроллер - выведится контроллер по-умолчанию (или ошибка 404 после написания ДЗ_№17). 

		//Отслеживание метода в URL и замена им метода по-умолчанию
		$this->controller = new $this->controller;				//создание объекта на основе класса контроллера, для поиска метода внутри его
		if (isset($url[1])) {											//при наличии второго параметра (метода ... могли вписать только один параметр) - то проверяем - метод ли это 
			if(method_exists($this->controller, $url[1])){		//проверка метода внутри контроллера на наличия. Первый аргумент-проверяемый класс, второй аргумент-предполагаемый метод
				$this->method = $url[1];								//присвоение методу по-умолчанию значения второго параметра - это метод. 
				unset($url[1]);											//удаление второго значения массива (метода) - это нужно, так как дальше пойдут параметры, в то время как метод уже записан в  "$this->method". Удаление нужно, чтобы при дальнейшей обработки URL'а контроллер и метод уже не участвовали, если они существуют в проекте. Если не существуют, товоспринимались как параметры. 
			}
		}	

		//Проверка массива в URL (после контроллера и метода) на пустоту и обнуление имеющихся индексов
		$this->params = $url ? array_values($url) : [];		//проверка массива на пустоту. $url - это массив. Если массив не пустой - обнулить индексы массива. При пустоте - присвоить пустое значение. 
		//Аналогичная запись: if($url){array_values($url);}else{$url = [];} Функция "array_values()" обнуляет индексы массива.

			//ограничение по числу передаваемых параметров - если в массиве передаваемых параметров имеется более одного элемента, то удаляем их
			//if(count($this->params) > 1){
			//	for ($i=count($this->params) - 1; $i > 0; $i--) { 
			//		unset($url[$i]);
			//	}
			//}

		// Если функция должна принимать параметры, то вам необходимо установить проверку:
            // Предположим что контроллер contact и в нем функция about должна принимать один параметр
            // Мы добавляем сюда тогда проверку

            $correctUrl = false; // Изначально наш URL думаем что некорректный
            // Если контроллер Contact и метод называется about
            // и количество дополнительных параметров меньше или равно 1,
            // то в таком случае это нормальный URL и не нужно вызывать страницу 404
					//is_a($this->controller, 'Contact' || 'Categories' || 'Product') && $this->method == 'about' &&  - эту часть проверки можно вырезать ... просто вверху уже есть проверка на контрллер в строке 14

				if(count($this->params) <= 1)
               $correctUrl = true; // Здесь говорим что URL корректный
			
				
            // Если переменная $correctUrl равна false и параметров больше чем 0, то выдаем страницу 404
            if(count($this->params) != 0 && !$correctUrl)
            $this->errorPage404();

		//Передача параметров контроллеру
		call_user_func_array([$this->controller, $this->method], $this->params);		 
		//call_user_func_array - функция обращения к методу из определенного контроллера (с отправкой параметров в этот метод). Первый атребут - контроллер и метод (в массиве). Второй - параметры, пересылаемые в метод параметры в виде массива (смотреть пункт выше с проверкой массива на пустоту). 
	}

	//метод разделения содержания URL строки на элементы массива (этот йметод вызывается в самом начале класса App)
	public function parseUrl(){				
		if(isset($_GET['url'])){				//если в адресной строке имеются запись URL, передаваемые GET массивом, ... $_GET['url'] - встроенныхв PHP ключ массива. 
			return explode('/', filter_var(	//то выполнять код условия - разбиение строки символом "/" на значения и возврат этих значения в виде массива.
						rtrim($_GET['url'], '/'), 
						FILTER_SANITIZE_STRING
					));	     
			//rtrim 			- функция удаления конкретного символа до строки и после строки. В данном случаи слэш. Вся надпись в адресной строке считается одной строкой.  
				//вводимое значение - /home/index/alex/ - будет выводиться как home/index/ale, так как слеши по бокам обрезаны.
			//filter_var 	- функция игнорирующая HTML вставки
			//explode		- функция, где первый параметр - символ по котороому разделяются строка, а второй параметр - это строка, которая разбивается на массив.
				//элементы на которое была разбита строка станявтся чстью массива
		}
	}
	
	public function errorPage404() {
		$host = '/app/views/errors/404.php';
		header('HTTP/1.1 404 Not Found');
		header("Status: 404 Not Found");
		header('Location: '.$host);
  }


}